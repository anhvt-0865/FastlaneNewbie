buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    signingConfigs {
        deploy {
            storeFile file('test.keystore')
            storePassword '123456'
            keyAlias = 'testify'
            keyPassword '123456'
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.testify"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 150
        versionName "2.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                if (outputFileName?.endsWith('.apk')) {
                    def appName = "Testify"
                    def newName = "${appName}-${variant.buildType.name}.apk"
                    outputFileName = newName
                }
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".dev"
        }

        staging {
            debuggable true
            applicationIdSuffix ".stg"
            signingConfig signingConfigs.deploy
        }

        release {
            minifyEnabled false
            signingConfig signingConfigs.deploy
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions 'enviroment'
    productFlavors {
        k1 {}
        k3 {}
    }
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['fix']}"
}

def readVersionCode() {
    def version = readVersion()
    def code = version['code'] as int
    return code
}

def readVersion() {
    def version = new Properties()
    file("version.properties").withInputStream { version.load(it) }
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['fix']) version['fix'] = "0"
    if (!version['code']) version['code'] = "100"
    return version
}

def incrementVersionNumber(def type = "code") {

    def version = readVersion()

    def major = version['major'] as int
    def minor = version['minor'] as int
    def fix = version['fix'] as int
    def code = version['code'] as int

    if (type == 'major') {
        major++
        minor = 0
        fix = 0
    } else if (type == 'minor') {
        minor++
        fix = 0
    }else if (type == 'fix') {
        fix++
    }

    code++

    version['major'] = major.toString()
    version['minor'] = minor.toString()
    version['fix'] = fix.toString()
    version['code'] = code.toString()

    file("version.properties").withOutputStream { version.store(it, null) }

    println "Build number is now..." + build

    return major + "." + minor
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'com.android.support:support-annotations:28.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'tools.fastlane:screengrab:1.1.0'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true;
    }
}
